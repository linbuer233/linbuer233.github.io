<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LZY-Meteorological-Workshop Blog</title>
        <link>https://linbuer233.github.io/blog</link>
        <description>LZY-Meteorological-Workshop Blog</description>
        <lastBuildDate>Wed, 18 Sep 2024 23:38:51 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[正在进行的项目]]></title>
            <link>https://linbuer233.github.io/blog/project</link>
            <guid>https://linbuer233.github.io/blog/project</guid>
            <pubDate>Wed, 18 Sep 2024 23:38:51 GMT</pubDate>
            <category>气象</category>
            <category>pkg</category>
        </item>
        <item>
            <title><![CDATA[正则表达式笔记]]></title>
            <link>https://linbuer233.github.io/blog/RegularExpression</link>
            <guid>https://linbuer233.github.io/blog/RegularExpression</guid>
            <pubDate>Sun, 21 May 2023 14:35:25 GMT</pubDate>
            <description><![CDATA[正则表达式是使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。]]></description>
            <content:encoded><![CDATA[<p>正则表达式是使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
<p>正则表达式描述了一种字符匹配的模式（pattern），可以用来检查一个串是否含有<strong>某种子串</strong>、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<p>正则表达式由<strong>普通字符</strong>（例如字符 a 到 z）以及<strong>特殊字符</strong>（称为"元字符"）组成的文字模式。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="普通字符">普通字符<a href="https://linbuer233.github.io/blog/RegularExpression#%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6" class="hash-link" aria-label="普通字符的直接链接" title="普通字符的直接链接">​</a></h2>
<p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括<strong>所有大写和小写字母</strong>、<strong>所有数字</strong>、<strong>所有标点符号</strong>和<strong>一些其他符号</strong>。</p>
<table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>[ABC]</code></td><td>匹配 <code>[...]</code> 中所有的字符</td></tr><tr><td><code>[^ABC]</code></td><td>匹配除了 <code>[...]</code> 中所有的字符</td></tr><tr><td><code>[A-Z]</code></td><td><code>[A-Z]</code> 表示一个区间，即匹配所有大写字母 <code>[a-z]</code> 表示匹配所有小写字母</td></tr><tr><td><code>.</code></td><td>匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]</td></tr><tr><td><code>\s\S</code></td><td>匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行</td></tr><tr><td><code>\w</code></td><td>匹配字母、数字、下划线。等价于 <code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\d</code></td><td>匹配数字</td></tr><tr><td><code>\D</code></td><td>匹配非数字</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="非打印字符">非打印字符<a href="https://linbuer233.github.io/blog/RegularExpression#%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6" class="hash-link" aria-label="非打印字符的直接链接" title="非打印字符的直接链接">​</a></h2>
<p>非打印字符也可以是正则表达式的组成部分。</p>
<table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\cx</code></td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于 \x0c 和 \cL</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于 \x0a 和 \cJ</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于 \x0d 和 \cM</td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[\f\n\r\t\v]</code> 。注意 Unicode 正则表达式会匹配全角空格符</td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符。等价于 <code>[^ \f\n\r\t\v]</code></td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于 \x09 和 \cI</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="特殊字符">特殊字符<a href="https://linbuer233.github.io/blog/RegularExpression#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6" class="hash-link" aria-label="特殊字符的直接链接" title="特殊字符的直接链接">​</a></h2>
<table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\' 匹配 ""，而 '(' 则匹配 "("。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td></td><td>标记限定符表达式的开始。要匹配 ，请使用 \     。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="限定符">限定符<a href="https://linbuer233.github.io/blog/RegularExpression#%E9%99%90%E5%AE%9A%E7%AC%A6" class="hash-link" aria-label="限定符的直接链接" title="限定符的直接链接">​</a></h2>
<p>限定符用来指定正则表达式的一个给定组件必须要多少次才能满足匹配。有
<code>*</code>
<code>+</code>
<code>?</code>
<code>{n}</code>
<code>{n, }</code>
<code>{n,m}</code></p>
<table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>&nbsp;能匹配&nbsp;<code>"z"</code>&nbsp;以及&nbsp;<code>"zoo"</code>。*&nbsp;等价于&nbsp;<code>{0,}</code></td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，zo +&nbsp;能匹配&nbsp;** "zo" **&nbsp;以及 ** "zoo" ** ，但不能匹配&nbsp;** "Z" ** +&nbsp;等价于&nbsp;$ { 1 , } $</td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，do(es)?&nbsp;可以匹配&nbsp;** "do" **&nbsp;、&nbsp;** "does" ** 、&nbsp;** "doxy" **&nbsp;中的&nbsp;** "do" **&nbsp;和&nbsp;** "does" ** 。?&nbsp;等价于&nbsp;<!-- -->1</td></tr><tr><td><code>{n}</code></td><td>n 是一个非负整数。匹配确定的&nbsp;<strong>n</strong>&nbsp;次。例如，o<!-- -->2<!-- -->&nbsp;不能匹配&nbsp;<strong>"Bob"</strong>&nbsp;中的&nbsp;<strong>o</strong>，但是能匹配&nbsp;<strong>"food"</strong>&nbsp;中的两个&nbsp;<strong>o</strong>。</td></tr><tr><td><code>{n,}</code></td><td>n 是一个非负整数。至少匹配 n 次。例如，o{2,}&nbsp;不能匹配&nbsp;<strong>"Bob"</strong>&nbsp;中的&nbsp;<strong>o</strong>，但能匹配&nbsp;<strong>"foooood"</strong>&nbsp;中的所有&nbsp;<strong>o</strong>。o{1,}&nbsp;等价于&nbsp;o+。o{0,}&nbsp;则等价于&nbsp;o*</td></tr><tr><td><code>{n,m}</code></td><td>m 和 n 均为非负整数，其中 n &lt; = m。最少匹配 n 次且最多匹配 m 次。例如，o {1,3}&nbsp;将匹配&nbsp;** "fooooood" **&nbsp;中的前三个&nbsp;** o **。o{0,1}&nbsp;等价于&nbsp;o?。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="定位符">定位符<a href="https://linbuer233.github.io/blog/RegularExpression#%E5%AE%9A%E4%BD%8D%E7%AC%A6" class="hash-link" aria-label="定位符的直接链接" title="定位符的直接链接">​</a></h2>
<p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，^&nbsp;和&nbsp;$&nbsp;分别指字符串的开始与结束，\b&nbsp;描述单词的前或后边界，\B&nbsp;表示非单词边界。</p>
<table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td><code>\B</code></td><td>非单词边界</td></tr></tbody></table>
<p><strong>注意：</strong></p>
<ul>
<li>
<p>不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如&nbsp;^*&nbsp;之类的表达式。</p>
</li>
<li>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用&nbsp;^&nbsp;字符。不要将&nbsp;^&nbsp;的这种用法与中括号表达式内的用法混淆。</p>
</li>
<li>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用&nbsp;$&nbsp;字符。</p>
</li>
<li>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首。</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="选择">选择<a href="https://linbuer233.github.io/blog/RegularExpression#%E9%80%89%E6%8B%A9" class="hash-link" aria-label="选择的直接链接" title="选择的直接链接">​</a></h2>
<p>用圆括号 <code>()</code> 将所有选择项括起来，相邻的选择项之间用 <code>|</code> 分隔。</p>
<p><code>()</code> 表示捕获分组，<code>()</code> 会把每个分组的匹配的值保存起来，多个匹配值可以通过数字 n 来查看（<strong>n</strong>是一个数字，表示第 n 个捕获组的内容）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-------的使用区别"><code>? = ,? &lt; = ,?!,? &lt;!</code> 的使用区别<a href="https://linbuer233.github.io/blog/RegularExpression#-------%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%88%AB" class="hash-link" aria-label="-------的使用区别的直接链接" title="-------的使用区别的直接链接">​</a></h2>
<ul>
<li>
<p><code>exp1(?=exp2)</code>  : 查找 exp2 前面的 exp1
<img decoding="async" loading="lazy" src="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" alt="" class="img_ev3q"></p>
</li>
<li>
<p><code>(?&lt;=exp 2) exp 1</code> : 查找 exp2 后面的 exp1
<img decoding="async" loading="lazy" src="https://www.runoob.com/wp-content/uploads/2014/03/reg-222.jpg" alt="" class="img_ev3q"></p>
</li>
<li>
<p><code>exp1(?!exp2)</code> : 查找后面不是 exp2 的 exp 1
<img decoding="async" loading="lazy" src="https://www.runoob.com/wp-content/uploads/2014/03/reg-333.jpg" alt="" class="img_ev3q"></p>
</li>
<li>
<p><code>(?&lt;!exp2)exp1</code> : 查找前面不是 exp2 的 exp1
<img decoding="async" loading="lazy" src="https://www.runoob.com/wp-content/uploads/2014/03/reg-444.jpg" alt="" class="img_ev3q"></p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修饰符">修饰符<a href="https://linbuer233.github.io/blog/RegularExpression#%E4%BF%AE%E9%A5%B0%E7%AC%A6" class="hash-link" aria-label="修饰符的直接链接" title="修饰符的直接链接">​</a></h2>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/pattern/flags</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<table><thead><tr><th>修饰符</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>ignore-</td><td>将匹配设置为不区分大小写，搜索时不区分大小写：A 和 a 没有区别</td></tr><tr><td>g</td><td>global</td><td>查找所有的匹配项</td></tr><tr><td>m</td><td>multi line</td><td>使边界字符&nbsp;^&nbsp;和&nbsp;$&nbsp;匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾</td></tr><tr><td>s</td><td>特殊字符圆点 . 中包含换行符 \n</td><td>默认情况下的圆点&nbsp;.&nbsp;是匹配除换行符&nbsp;\n&nbsp;之外的任何字符，加上&nbsp;s&nbsp;修饰符之后，&nbsp;.&nbsp;中包含换行符 \n</td></tr></tbody></table>
<p><img decoding="async" loading="lazy" src="https://www.runoob.com/wp-content/uploads/2014/03/regexp-metachar-2020-11-23.png" alt="" class="img_ev3q"></p>]]></content:encoded>
            <category>命令</category>
            <category>编程相关</category>
            <category>正则表达式</category>
        </item>
        <item>
            <title><![CDATA[预测评估的指标]]></title>
            <link>https://linbuer233.github.io/blog/pingfen</link>
            <guid>https://linbuer233.github.io/blog/pingfen</guid>
            <pubDate>Mon, 04 Jul 2022 18:38:51 GMT</pubDate>
            <description><![CDATA[{/*]]></description>
            <category>ML&amp;DL</category>
            <category>气象</category>
        </item>
    </channel>
</rss>